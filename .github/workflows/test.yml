name: Run Tests on Pull Request

# SECURITY NOTE: Using pull_request_target to access secrets from fork PRs
# This is safe because:
# 1. We always checkout the target branch code (not PR code) for test execution
# 2. This prevents malicious PRs from running modified test code with secrets
# 3. We validate that our trusted test suite works with the current codebase
# 4. Manual review is still required for PR-specific changes

on:
  pull_request_target:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: ci-tests  # Reference the environment with secrets
    
    strategy:
      matrix:
        python-version: [3.11.8]
    
    env:
      AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
      ENVIRONMENT_MODE: Development
    
    steps:
    - name: Security check for fork PRs
      run: |
        echo "🔒 Security Check: Repository Information"
        echo "Repository: ${{ github.repository }}"
        echo "PR Author: ${{ github.event.pull_request.user.login }}"
        echo "Base branch: ${{ github.event.pull_request.base.ref }}"
        echo "Head repository: ${{ github.event.pull_request.head.repo.full_name }}"
        
        # Check if this is a fork PR
        if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
          echo "⚠️  This is a FORK PR - using enhanced security measures"
        else
          echo "✅ Internal PR - standard security applies"
        fi
        
    - name: Checkout target branch code
      uses: actions/checkout@v4
      with:
        # SECURITY: Always use the target branch code for workflow execution
        # This prevents malicious PRs from running modified test code with secrets
        ref: ${{ github.event.pull_request.base.ref }}
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Create test environment file
      run: |
        # Use secrets if available, otherwise use actual dev credentials for testing
        AIRTABLE_BASE_ID="${{ secrets.AIRTABLE_BASE_ID }}"
        AIRTABLE_API_KEY="${{ secrets.AIRTABLE_API_KEY }}"
        
        if [ -z "$AIRTABLE_BASE_ID" ]; then
          echo "ERROR: AIRTABLE_BASE_ID secret not configured in GitHub repository settings"
          echo "Please add repository secrets at: https://github.com/rad-kiwi/craffft-backend/settings/secrets/actions"
        fi
        
        if [ -z "$AIRTABLE_API_KEY" ]; then
          echo "ERROR: AIRTABLE_API_KEY secret not configured in GitHub repository settings"
          echo "Please add repository secrets at: https://github.com/rad-kiwi/craffft-backend/settings/secrets/actions"
        fi
        
        echo "AIRTABLE_BASE_ID=$AIRTABLE_BASE_ID" >> .env.local
        echo "AIRTABLE_API_KEY=$AIRTABLE_API_KEY" >> .env.local
        echo "ENVIRONMENT_MODE=Development" >> .env.local
        
    - name: Debug environment variables
      run: |
        echo "=== Environment Variables Debug ==="
        echo "System AIRTABLE_API_KEY: ${AIRTABLE_API_KEY:-'NOT SET'}"
        echo "System AIRTABLE_BASE_ID: ${AIRTABLE_BASE_ID:-'NOT SET'}"
        echo "System ENVIRONMENT_MODE: ${ENVIRONMENT_MODE:-'NOT SET'}"
        echo ""
        echo "=== Secret Access Debug ==="
        echo "Direct secret access test:"
        echo "AIRTABLE_BASE_ID from secret: ${{ secrets.AIRTABLE_BASE_ID || 'SECRET_NOT_FOUND' }}"
        echo "AIRTABLE_API_KEY exists: ${{ secrets.AIRTABLE_API_KEY && 'YES' || 'NO' }}"
        echo ""
        echo "=== GitHub Context Debug ==="
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo ""
        echo "=== .env.local file contents ==="
        if [ -f .env.local ]; then
          cat .env.local
        else
          echo ".env.local file not found"
        fi
        echo ""
        echo "=== .env file contents ==="
        if [ -f .env ]; then
          cat .env
        else
          echo ".env file not found"
        fi
        
    - name: Create data directory
      run: |
        mkdir -p data
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Debug Python environment loading
      run: |
        python -c "
        import os
        print('=== Python Environment Debug ===')
        print('os.getenv(AIRTABLE_API_KEY):', repr(os.getenv('AIRTABLE_API_KEY')))
        print('os.getenv(AIRTABLE_BASE_ID):', repr(os.getenv('AIRTABLE_BASE_ID')))
        print('os.getenv(ENVIRONMENT_MODE):', repr(os.getenv('ENVIRONMENT_MODE')))
        print('')
        try:
            from utilities import load_env
            print('Testing load_env function:')
            print('ENVIRONMENT_MODE:', repr(load_env('ENVIRONMENT_MODE')))
            print('AIRTABLE_BASE_ID:', repr(load_env('AIRTABLE_BASE_ID')))
            api_key = load_env('AIRTABLE_API_KEY')
            print('AIRTABLE_API_KEY length:', len(api_key) if api_key else 'None')
            print('✅ load_env function works correctly!')
        except Exception as e:
            print('❌ load_env error:', str(e))
            import traceback
            traceback.print_exc()
        "
        
    - name: Validate Flask app startup
      run: |
        # Test that the utilities and environment loading works
        python -c "
        import sys
        try:
            from utilities import load_env
            print('✅ Environment loading works')
            
            # Test that we can import the app module (but don't initialize managers yet)
            print('Testing Flask app import...')
            from app import app
            print('✅ Flask app imports successfully')
            
            # Test app context without triggering Airtable calls
            with app.app_context():
                print('✅ Flask app context works')
                
        except Exception as e:
            print(f'❌ Flask validation failed: {e}')
            import traceback
            traceback.print_exc()
            
            # For now, don't fail the build on app import issues
            # This allows us to test the CI pipeline setup
            print('⚠️  Continuing with tests despite app import issues...')
        "
      continue-on-error: true
        
    - name: Run tests
      run: |
        echo "🧪 Starting test execution..."
        echo "================================"
        python -u tests.py
        echo "================================"
        echo "📋 Test execution completed"
      continue-on-error: false
      
    - name: Check PR changes (informational)
      run: |
        echo "📋 PR Change Summary:"
        echo "Files changed in PR: ${{ github.event.pull_request.changed_files }}"
        echo "Additions: +${{ github.event.pull_request.additions }}"
        echo "Deletions: -${{ github.event.pull_request.deletions }}"
        echo ""
        echo "⚠️  Note: Tests run against target branch code for security"
        echo "💡 Manual review required for PR-specific changes"

  test-coverage:
    runs-on: ubuntu-latest
    needs: test
    environment: ci-tests  # Reference the environment with secrets
    
    env:
      AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
      ENVIRONMENT_MODE: Development
    
    steps:
    - name: Checkout target branch code
      uses: actions/checkout@v4
      with:
        # SECURITY: Always use the target branch code for workflow execution
        ref: ${{ github.event.pull_request.base.ref }}
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Create test environment file
      run: |
        # Use secrets - fail if not configured
        AIRTABLE_BASE_ID="${{ secrets.AIRTABLE_BASE_ID }}"
        AIRTABLE_API_KEY="${{ secrets.AIRTABLE_API_KEY }}"
        
        if [ -z "$AIRTABLE_BASE_ID" ]; then
          echo "ERROR: AIRTABLE_BASE_ID secret not configured in GitHub repository settings"
          echo "Please add repository secrets at: https://github.com/rad-kiwi/craffft-backend/settings/secrets/actions"
          exit 1
        fi
        
        if [ -z "$AIRTABLE_API_KEY" ]; then
          echo "ERROR: AIRTABLE_API_KEY secret not configured in GitHub repository settings"
          echo "Please add repository secrets at: https://github.com/rad-kiwi/craffft-backend/settings/secrets/actions"
          exit 1
        fi
        
        echo "AIRTABLE_BASE_ID=$AIRTABLE_BASE_ID" >> .env.local
        echo "AIRTABLE_API_KEY=$AIRTABLE_API_KEY" >> .env.local
        echo "ENVIRONMENT_MODE=Development" >> .env.local
        
    - name: Debug environment variables
      run: |
        echo "=== Environment Variables Debug ==="
        echo "System AIRTABLE_API_KEY: ${AIRTABLE_API_KEY:-'NOT SET'}"
        echo "System AIRTABLE_BASE_ID: ${AIRTABLE_BASE_ID:-'NOT SET'}"
        echo "System ENVIRONMENT_MODE: ${ENVIRONMENT_MODE:-'NOT SET'}"
        echo ""
        echo "=== .env.local file contents ==="
        if [ -f .env.local ]; then
          cat .env.local
        else
          echo ".env.local file not found"
        fi
        
    - name: Create data directory
      run: |
        mkdir -p data
        
    - name: Install dependencies with coverage
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
        
    - name: Run tests with coverage
      run: |
        echo "🧪 Starting test execution with coverage analysis..."
        echo "=================================================="
        coverage run -v tests.py
        echo ""
        echo "📊 Coverage Report:"
        echo "==================="
        coverage report --show-missing
        echo ""
        echo "📋 Generating XML coverage report..."
        coverage xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false