name: Run Tests on Pull Request

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test environment file
      run: |
        echo "AIRTABLE_BASE_ID=${{ secrets.AIRTABLE_BASE_ID }}" >> .env.local
        echo "AIRTABLE_API_KEY=${{ secrets.AIRTABLE_API_KEY }}" >> .env.local
        echo "ENVIRONMENT_MODE=Development" >> .env.local
        
    - name: Create data directory
      run: |
        mkdir -p data
        
    - name: Validate Flask app startup
      run: |
        # Test that the Flask app can import and initialize without errors
        python -c "
        import sys
        try:
            from app import app
            print('✅ Flask app imports successfully')
            with app.app_context():
                print('✅ Flask app context works')
        except Exception as e:
            print(f'❌ Flask app failed to import: {e}')
            sys.exit(1)
        "
        
    - name: Run tests
      run: |
        python tests.py
      continue-on-error: false

  test-coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies with coverage
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
        
    - name: Create test environment file
      run: |
        echo "AIRTABLE_BASE_ID=${{ secrets.AIRTABLE_BASE_ID }}" >> .env.local
        echo "AIRTABLE_API_KEY=${{ secrets.AIRTABLE_API_KEY }}" >> .env.local
        echo "ENVIRONMENT_MODE=Development" >> .env.local
        
    - name: Create data directory
      run: |
        mkdir -p data
        
    - name: Run tests with coverage
      run: |
        coverage run tests.py
        coverage report
        coverage xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false